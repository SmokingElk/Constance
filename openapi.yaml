openapi: 3.0.3

servers:
  - url: http://Constance/api/v1

info:
  version: 1.0.11
  title: Constance open API documentation.
  
tags:
  - name: user
    description: Primary data manipulation
    
  - name: profile
    description: Profile manipulation
  
  - name: prefs
    description: Preferences manipulation

  - name: chars
    description: Characteristics manipulation

  - name: search
    description: Search manipulation
      
paths:
  /user/auth:
    get:
      tags:
        - user
      summary: Enter and return jwt token
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
            example: Andrey
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: k56f98G21
      responses:
        '200':
          description: Successful authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthData'
        '400':
          description: Wrong password
        '404':
          description: User not found
        
  /user/sign_up:
    post:
      tags:
        - user
      summary: Sign up user and return jwt token
      requestBody:
        required: true
        description: Data to sign up user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpData'
      responses:
        '201':
          description: Successful sign up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthData'
        '400':
          description: Provided username or password are invalid
        '409':
          description: User with provided name already exists
          
  /user/primary_data:
    get:
      tags:
        - user
      summary: Get primary data of user
      description: Get primary data of user (username, birthdate, sex).
      parameters:
        - name: jwtToken
          in: query
          required: true
          schema:
              type: string
              example: "213-23213-2132"
      responses:
        '200':
          description: Successful data getting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrimaryData'
        '401':
          description: User is not authorized
        '404':
          description: User not found
  
  /profile/get_data_to_edit:
    get:
      tags:
        - profile
      summary: Get editable profile data
      description: Get data of user profile, which can be edit in personal profile page.
      parameters:
        - name: jwtToken
          in: query
          required: true
          schema:
              type: string
              example: "213-23213-2132"
      responses:
        '200':
          description: Successful data getting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyProfileData'
        '401':
          description: User is not authorized
        '404':
          description: User not found
          
  /profile/get_data_to_view/<int:userId>:
    get:
      tags:
        - profile
      summary: Get profile data to viewing
      description: Get data of someone profile to view it in other profile page
      parameters:
        - name: jwtToken
          in: query
          required: true
          schema:
              type: string
              example: "213-23213-2132"
      responses:
        '200':
          description: Successful data getting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomeoneProfileData'
        '401':
          description: User is not authorized
        '404':
          description: Requested user does not exist
  
  /profile/patch_text_data:
    put:
      tags:
        - profile
      summary: Update profile text data
      description: Update profile text data of current user (which is firstname, lastname, social and phone number)
      requestBody:
        description: Profile patching data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jwtToken:
                  type: string
                  example: "213-23213-2132"
                patch:
                  $ref: '#/components/schemas/ProfilePatch'
      responses:
        '200':
          description: Data successfully patched
        '401':
          description: User is not authorized
        '400':
          description: Unexpected patch key
        '404':
          description: User not found

  /profile/set_photo:
    put:
      tags:
        - profile
      summary: Set profile photo
      description: Sets user profile photo and returns its name in static folder
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                jwtToken:
                  type: string
                  example: "213-23213-2132"
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Photo successfully changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoName:
                    type: string
                    example: res0.png
        '401':
          description: User is not authorized
        '404':
          description: User not found

  /prefs/get_all:
    get:
      tags:
        - prefs
      summary: Get all preferences data
      parameters:
        - name: jwtToken
          in: query
          required: true
          schema:
              type: string
              example: "213-23213-2132"
      responses:
        '200':
          description: Data successfully sended. Array in response may also contain descrete and continous pref.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/BinaryPrefData"

        '401':
          description: User is not authorized
        '404':
          description: User not found
  
  /prefs/patch_pref:
    put:
      tags:
        - prefs
      summary: Patch preference data
      requestBody:

        description: Preference patching data may be binary, discret or continous patch data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jwtToken:
                  type: string
                  example: "213-23213-2132"
                id: 
                  type: "number"
                  example: 1
                patch:
                  $ref: '#/components/schemas/BinaryPatch'

      responses:
        '200':
          description: successfully updated
        '400':
          description: property not found
        '401':
          description: User is not authorized
        '404':
          description: User not found

  /chars/get_all:
    get:
      tags:
        - chars
      summary: Get all characteristics data
      parameters:
        - name: jwtToken
          in: query
          required: true
          schema:
              type: string
              example: "213-23213-2132"
      responses:
        '200':
          description: Data successfully sended. Array in response may also contain descrete and continous characteristics.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/BinaryCharData"

        '401':
          description: User is not authorized
        '404':
          description: User not found

  /chars/patch_char:
    put:
      tags:
        - chars
      summary: Patch characteristic.
      requestBody:

        description: Characteristic patching value may be string (for discret) or number (for continous).
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jwtToken:
                  type: string
                  example: "213-23213-2132"
                id: 
                  type: "number"
                  example: 1
                value:
                  type: "boolean"
                  example: true
      responses:
        '200':
          description: successfully updated
        '400':
          description: property not found
        '401':
          description: User is not authorized
        '404':
          description: User not found

  /search/get_pack:
    get:
      tags:
        - search
      summary: Get users search data
      parameters:
        - name: jwtToken
          in: query
          required: true
          schema:
              type: string
              example: "213-23213-2132"
        - name: pack_number
          in: query
          required: true
          schema:
              type: string
              example: "213-23213-2132"
      responses:
        '200':
          description: Data successfully sended.
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_end: 
                    type: boolean
                    example: false
                    description: Is packs end last.
                  pack_items:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/FoundUserData"

        '401':
          description: User is not authorized          

components:
  schemas:
    AuthData:
      type: object
      properties:
        username:
          type: string
          example: Ivan
          description: name of authorized user
        birthdate:
          type: string
          example: 1999-10-10
        sex:
          type: boolean
          description: true - male, false - female
        jwtToken:
          type: string
          description: jwt token with user id
          
    SignUpData:
      type: object
      properties:
        username:
          type: string
          example: Ivan
          description: name of user
        password:
          type: string
          description: password of future account
          example: k56f98G21
        birthdate:
          type: string
          example: 1999-10-10
        sex:
          type: boolean
          description: true - male, false - female
          
    PrimaryData:
      type: object
      properties:
        username:
          type: string
          example: Ivan
          description: name of user
        birthdate:
          type: string
          example: 1999-10-10
        sex:
          type: boolean
          description: true - male, false - female
      
    MyProfileData:
      type: object
      properties: 
        firstname:
          type: string
          description: user firstname
          example: Ivan
        lastname:
          type: string
          description: user lastname
          example: Ivanovich
        social:
          type: string
          description: social media link
          example: \@IvanIvanych
        phone:
          type: string
          description: mobile phone number
          example: +7(999)999-99-99
        photo:
          type: string
          description: image name in static folder
          example: img0.png
        about_me:
          type: string
          description: Short description of user.
        location:
          type: string
          description: City of user.
          example: Moscow
    
    SomeoneProfileData:    
      type: object
      properties: 
        username:
          type: string
          description: user firstname
          example: Vano
        firstname:
          type: string
          description: user firstname
          example: Ivan
        lastname:
          type: string
          description: user lastname
          example: Ivanovich
        social:
          type: string
          description: social media link
          example: \@IvanIvanych
        phone:
          type: string
          description: mobile phone number
          example: +7(999)999-99-99
        photoName:
          type: string
          description: image name in static folder
          example: img0.png
        birthdate:
          type: string
          example: 1999-10-10
        about_me:
          type: string
          description: Short description of user.
        location:
          type: string
          description: City of user.
          example: Moscow
          
    ProfilePatch:
      type: object
      properties: 
        firstname:
          type: string
          description: user firstname
          example: Ivan
        lastname:
          type: string
          description: user lastname
          example: Ivanovich
        social:
          type: string
          description: social media link
          example: \@IvanIvanych
        phone_number:
          type: string
          description: mobile phone number
          example: +7(999)999-99-99
        about_me:
          type: string
          description: Short description of user.
        location:
          type: string
          description: City of user.
          example: Moscow

    BinaryPrefData:
      type: object
      properties:
        prefType:
          type: "string"
          example: "binary"
        id: 
          type: "number"
          example: 1
        group:
          type: "string"
          example: "appearance"
        positiveScale: 
          type: number
          example: 1.0
        negativeScale:
          type: number
          example: 1.0
        otherNegative:
          type: boolean
          example: false

    DiscretPrefData:
      type: object
      properties:
        prefType:
          type: "string"
          example: "discrete"
        id: 
          type: "number"
          example: 1
        group:
          type: "string"
          example: "appearance"
        positiveScale: 
          type: number
          example: 1.0
        negativeScale:
          type: number
          example: 1.0
        otherNegative:
          type: boolean
          example: false
        columnsCoefs:
          type: array
          example: [1.0, 2.0, 0.4]
    
    ContinousPrefData:
      type: object
      properties:
        prefType:
          type: "string"
          example: "continuous"
        id: 
          type: "number"
          example: 1
        group:
          type: "string"
          example: "appearance"
        positiveScale: 
          type: number
          example: 1.0
        negativeScale:
          type: number
          example: 1.0
        otherNegative:
          type: boolean
          example: false
        point:
          type: object
          properties: 
            x: 
              type: number
              example: 1
            y: 
              type: number
              example: 0.5
    
    BinaryPatch:
      type: object
      properties:
        positiveScale: 
          type: number
          example: 1.0
        negativeScale:
          type: number
          example: 1.0
        otherNegative:
          type: boolean
          example: false

    DiscretPatch:
      type: object
      properties:
        positiveScale: 
          type: number
          example: 1.0
        negativeScale:
          type: number
          example: 1.0
        otherNegative:
          type: boolean
          example: false
        columnCoef:
          type: object
          properties:
            columnNumber:
              type: number
              example: 0
            coef:
              type: number
              example: 0.5

    ContinousPatch:
      type: object
      properties:
        positiveScale: 
          type: number
          example: 1.0
        negativeScale:
          type: number
          example: 1.0
        otherNegative:
          type: boolean
          example: false
        spreadPoints:
          type: array
          example: [1.0, 2.0, 0.4]

    BinaryCharData:
      type: object
      properties:
        charType:
          type: "string"
          example: "binary"
        id: 
          type: "number"
          example: 1
        group:
          type: "string"
          example: "appearance"
        value:
          type: "boolean"
          example: true

    DiscretCharData:
      type: object
      properties:
        charType:
          type: "string"
          example: "binary"
        id: 
          type: "number"
          example: 1
        value:
          type: "string"
          example: blue

    ContinousCharData:
      type: object
      properties:
        charType:
          type: "string"
          example: "binary"
        id: 
          type: "number"
          example: 1
        value:
          type: "number"
          example: 0.5


    FoundUserData:
      type: object
      properties:
        firstname:
          type: string
          description: user firstname
          example: Ivan
        about_me:
          type: string
          description: Short description of user.
        photo:
          type: string
          description: image name in static folder
          example: img0.png
        rate:
          type: number
          description: Accordance level between -inf and 1.
          example: 0.5
        location:
          type: string
          description: City of user.
          example: Moscow
        id: 
          type: number
          description: Id of founded user
          example: 1